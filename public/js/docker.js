/**
 * üê≥ DOCKER WIDGET
 * –í–∏–¥–∂–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

class DockerWidget {
    constructor() {
        this.dockerData = null;
        this.lastUpdate = 0;
        this.cacheKey = 'cyberkitty_docker_cache';
        this.cacheDuration = 8000; // 8 —Å–µ–∫—É–Ω–¥ (Docker –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
        
        console.log('üê≥ Docker widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    async init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.loadFromCache();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.dockerData) {
            this.renderDockerContainers();
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        await this.loadDockerData();
        this.startAutoRefresh();
    }
    
    loadFromCache() {
        try {
            const cached = localStorage.getItem(this.cacheKey);
            if (cached) {
                const data = JSON.parse(cached);
                if (Date.now() - data.timestamp < this.cacheDuration) {
                    this.dockerData = data.dockerData;
                    this.lastUpdate = data.timestamp;
                    console.log('üê≥ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Docker –∏–∑ –∫–µ—à–∞');
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ Docker:', error);
        }
    }
    
    saveToCache() {
        try {
            const data = {
                dockerData: this.dockerData,
                timestamp: Date.now()
            };
            localStorage.setItem(this.cacheKey, JSON.stringify(data));
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ Docker:', error);
        }
    }
    
    async loadDockerData() {
        try {
            const response = await fetch('/api/docker-containers');
            const data = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if (JSON.stringify(this.dockerData) !== JSON.stringify(data)) {
                this.dockerData = data;
                this.lastUpdate = Date.now();
                this.saveToCache();
                this.renderDockerContainers();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Docker –¥–∞–Ω–Ω—ã—Ö:', error);
            this.renderError();
        }
    }
    
    renderDockerContainers() {
        const container = document.getElementById('docker-containers');
        if (!this.dockerData) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...</div>';
            return;
        }
        
        let dockerHtml = `
            <div class="docker-sections">
                <div class="docker-section local-docker">
                    <h3>üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã</h3>
                    ${this.renderDockerTable(this.dockerData.local, 'local')}
                </div>
                <div class="docker-section remote-docker">
                    <h3>üåê –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã</h3>
                    ${this.renderRemoteDockerServers(this.dockerData.servers)}
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        dockerHtml += `
            <div class="widget-footer">
                <span class="last-update">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(this.lastUpdate).toLocaleTimeString()}</span>
            </div>
        `;
        
        container.innerHTML = dockerHtml;
    }
    
    renderDockerTable(containers, location) {
        if (!containers || containers.length === 0) {
            return `<div class="empty-state">–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
        }
        
        let tableHtml = `
            <div class="docker-table">
                <div class="docker-header">
                    <span class="docker-col name">–ò–º—è</span>
                    <span class="docker-col image">–û–±—Ä–∞–∑</span>
                    <span class="docker-col status">–°—Ç–∞—Ç—É—Å</span>
                    <span class="docker-col ports">–ü–æ—Ä—Ç—ã</span>
                </div>
        `;
        
        containers.forEach((container, index) => {
            const statusClass = this.getDockerStatusClass(container.state);
            
            tableHtml += `
                <div class="docker-row ${index % 2 === 0 ? 'even' : 'odd'}">
                    <span class="docker-col name" title="${container.name}">${this.truncateText(container.name, 20)}</span>
                    <span class="docker-col image" title="${container.image}">${this.truncateText(container.image, 25)}</span>
                    <span class="docker-col status ${statusClass}">${this.formatDockerStatus(container.state)}</span>
                    <span class="docker-col ports" title="${container.ports}">${this.truncateText(container.ports || '–ù–µ—Ç', 15)}</span>
                </div>
            `;
        });
        
        tableHtml += '</div>';
        return tableHtml;
    }
    
    renderRemoteDockerServers(servers) {
        let serversHtml = '';
        
        Object.entries(servers).forEach(([serverName, containers]) => {
            const displayName = serverName === 'got_is_tod' ? 'üöÄ Got Is Tod' : 'üíé Azure Aluminium';
            
            serversHtml += `
                <div class="server-section">
                    <h4>${displayName}</h4>
                    ${this.renderDockerTable(containers, serverName)}
                </div>
            `;
        });
        
        return serversHtml;
    }
    
    renderError() {
        const container = document.getElementById('docker-containers');
        container.innerHTML = `
            <div class="error-message">
                <div class="error-icon">‚ùå</div>
                <span>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Docker –¥–∞–Ω–Ω—ã—Ö</span>
                <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º</small>
            </div>
        `;
    }
    
    getDockerStatusClass(state) {
        switch(state) {
            case 'running': return 'docker-running';
            case 'exited': return 'docker-exited';
            case 'paused': return 'docker-paused';
            case 'created': return 'docker-created';
            default: return 'docker-unknown';
        }
    }
    
    formatDockerStatus(state) {
        const statusMap = {
            'running': 'üü¢ –ó–∞–ø—É—â–µ–Ω',
            'exited': 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'paused': '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'created': 'üÜï –°–æ–∑–¥–∞–Ω',
            'restarting': 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫'
        };
        return statusMap[state] || '‚ùì ' + state;
    }
    
    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength - 3) + '...';
    }
    
    startAutoRefresh() {
        setInterval(() => {
            this.loadDockerData();
        }, 15000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (Docker –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
    }
}

console.log('üê≥ Docker widget –∑–∞–≥—Ä—É–∂–µ–Ω'); 