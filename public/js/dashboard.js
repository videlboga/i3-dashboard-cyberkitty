/**
 * üöÄ CYBERKITTY DASHBOARD MAIN
 * –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–∞—à–±–æ—Ä–¥–∞
 */

class CyberkittyDashboard {
    constructor() {
        this.components = {};
        this.refreshInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.intervalId = null;
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cyberkitty Dashboard...');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        await this.requestPermissions();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.initializeComponents();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.startAutoRefresh();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.bindGlobalEvents();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        this.showStartupAnimation();
        
        console.log('‚úÖ Dashboard –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }
    
    async requestPermissions() {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if ('Notification' in window && Notification.permission === 'default') {
            const permission = await Notification.requestPermission();
            console.log(`üîî –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${permission}`);
        }
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    }
    
    initializeComponents() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–º–æ–¥–æ—Ä–æ —Ç–∞–π–º–µ—Ä
        if (typeof PomodoroTimer !== 'undefined') {
            this.components.pomodoro = new PomodoroTimer();
            console.log('üçÖ –ü–æ–º–æ–¥–æ—Ä–æ —Ç–∞–π–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)
        if (typeof CalendarWidget !== 'undefined') {
            this.components.calendar = new CalendarWidget();
            console.log('üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        if (typeof SystemWidget !== 'undefined') {
            this.components.system = new SystemWidget();
            this.components.system.init();
            console.log('üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if (typeof MonitorWidget !== 'undefined') {
            this.components.monitor = new MonitorWidget();
            this.components.monitor.init();
            console.log('‚öôÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        this.initializeTimeUpdate();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.initializeSystemInfo();
    }
    
    initializeTimeUpdate() {
        const updateTime = () => {
            const timeElement = document.getElementById('current-time');
            if (timeElement) {
                const now = new Date();
                const timeString = now.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
                const dateString = now.toLocaleDateString('ru-RU', {
                    weekday: 'short',
                    day: 'numeric',
                    month: 'short'
                });
                
                timeElement.textContent = `‚è∞ ${timeString} | ${dateString}`;
            }
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        updateTime();
        setInterval(updateTime, 1000);
    }
    
    async initializeSystemInfo() {
        const updateSystemInfo = async () => {
            const systemElement = document.getElementById('system-info');
            if (systemElement) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    const info = await this.getSystemInfo();
                    systemElement.textContent = `üíª CPU: ${info.cpu}% | RAM: ${info.memory}%`;
                } catch (error) {
                    systemElement.textContent = 'üíª –°–∏—Å—Ç–µ–º–∞: OK';
                }
            }
        };
        
        updateSystemInfo();
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(updateSystemInfo, 5000);
    }
    
    async getSystemInfo() {
        // –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API)
        try {
            const response = await fetch('/api/system-info');
            if (response.ok) {
                return await response.json();
            }
        } catch (error) {
            console.log('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
        }
        
        // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return {
            cpu: Math.floor(Math.random() * 30) + 10,
            memory: Math.floor(Math.random() * 40) + 20
        };
    }
    
    startAutoRefresh() {
        this.intervalId = setInterval(() => {
            this.refreshData();
        }, this.refreshInterval);
    }
    
    async refreshData() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if (this.components.calendar && typeof this.components.calendar.refresh === 'function') {
            await this.components.calendar.refresh();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (this.components.monitor && typeof this.components.monitor.refresh === 'function') {
            await this.components.monitor.refresh();
        }
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    bindGlobalEvents() {
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –≤—Å–µ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
        document.addEventListener('keydown', (e) => {
            // –ï—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
                return;
            }
            
            switch(e.key) {
                case 'F5':
                    e.preventDefault();
                    this.refreshData();
                    break;
                case 'F11':
                    e.preventDefault();
                    this.toggleFullscreen();
                    break;
                case '?':
                    this.showKeyboardShortcuts();
                    break;
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ visibility change –¥–ª—è –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                console.log('üåô Dashboard —Å–∫—Ä—ã—Ç');
                // –ú–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            } else {
                console.log('üåÖ Dashboard —Å–Ω–æ–≤–∞ –≤–∏–¥–∏–º');
                // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                this.refreshData();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (e) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞—à–±–æ—Ä–¥–µ:', e.error);
            this.showErrorNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∞—à–±–æ—Ä–¥–µ');
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ unhandled promise rejections
        window.addEventListener('unhandledrejection', (e) => {
            console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', e.reason);
            this.showErrorNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
        });
    }
    
    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen();
        } else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            }
        }
    }
    
    showKeyboardShortcuts() {
        const shortcuts = [
            'üçÖ –ü—Ä–æ–±–µ–ª - –°—Ç–∞—Ä—Ç/–ü–∞—É–∑–∞ –ø–æ–º–æ–¥–æ—Ä–æ',
            'üçÖ R - –°–±—Ä–æ—Å –ø–æ–º–æ–¥–æ—Ä–æ',
            'üîÑ F5 - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
            'üñ•Ô∏è F11 - –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω',
            '‚ùì ? - –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏'
        ];
        
        alert('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n\n' + shortcuts.join('\n'));
    }
    
    showErrorNotification(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const notification = document.createElement('div');
        notification.className = 'error-notification';
        notification.innerHTML = `
            <div class="error-content">
                <span class="error-icon">‚ö†Ô∏è</span>
                <span class="error-message">${message}</span>
                <button class="error-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!document.getElementById('error-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'error-notification-styles';
            style.textContent = `
                .error-notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: var(--cyberkitty-red);
                    color: var(--cyberkitty-bg);
                    padding: var(--padding-normal);
                    border-radius: var(--border-radius);
                    box-shadow: var(--shadow-large);
                    z-index: 9999;
                    animation: slideIn var(--transition-fast) ease-out;
                }
                .error-content {
                    display: flex;
                    align-items: center;
                    gap: var(--margin-normal);
                }
                .error-close {
                    background: none;
                    border: none;
                    color: inherit;
                    cursor: pointer;
                    font-size: 18px;
                    padding: 0;
                    margin-left: auto;
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (document.body.contains(notification)) {
                notification.remove();
            }
        }, 5000);
    }
    
    showStartupAnimation() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        const widgets = document.querySelectorAll('.widget');
        widgets.forEach((widget, index) => {
            widget.style.opacity = '0';
            widget.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                widget.style.transition = 'all 0.5s ease-out';
                widget.style.opacity = '1';
                widget.style.transform = 'translateY(0)';
            }, index * 200);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            this.showWelcomeMessage();
        }, 1000);
    }
    
    showWelcomeMessage() {
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification('üöÄ Cyberkitty Dashboard', {
                body: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.',
                icon: 'üöÄ'
            });
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    async callAPI(endpoint, options = {}) {
        const defaultOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        };
        
        const finalOptions = { ...defaultOptions, ...options };
        
        try {
            const response = await fetch(endpoint, finalOptions);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
        } catch (error) {
            console.error(`API Error (${endpoint}):`, error);
            throw error;
        }
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    formatUptime(seconds) {
        const days = Math.floor(seconds / 86400);
        const hours = Math.floor((seconds % 86400) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        
        if (days > 0) {
            return `${days}–¥ ${hours}—á ${minutes}–º`;
        } else if (hours > 0) {
            return `${hours}—á ${minutes}–º`;
        } else {
            return `${minutes}–º`;
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è cleanup
    destroy() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
        }
        
        // –û—á–∏—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        Object.values(this.components).forEach(component => {
            if (component && typeof component.destroy === 'function') {
                component.destroy();
            }
        });
        
        console.log('üõë Dashboard –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåü DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º Cyberkitty Dashboard...');
    window.dashboard = new CyberkittyDashboard();
});

// Graceful shutdown
window.addEventListener('beforeunload', () => {
    if (window.dashboard) {
        window.dashboard.destroy();
    }
}); 