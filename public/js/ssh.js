/**
 * üîê SSH WIDGET
 * –í–∏–¥–∂–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

class SSHWidget {
    constructor() {
        this.sshData = null;
        this.lastUpdate = 0;
        this.cacheKey = 'cyberkitty_ssh_cache';
        this.cacheDuration = 10000; // 10 —Å–µ–∫—É–Ω–¥ (SSH –±—ã—Å—Ç—Ä–µ–µ)
        
        console.log('üîê SSH widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    async init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.loadFromCache();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.sshData) {
            this.renderSSHConnections();
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        await this.loadSSHData();
        this.startAutoRefresh();
    }
    
    loadFromCache() {
        try {
            const cached = localStorage.getItem(this.cacheKey);
            if (cached) {
                const data = JSON.parse(cached);
                if (Date.now() - data.timestamp < this.cacheDuration) {
                    this.sshData = data.sshData;
                    this.lastUpdate = data.timestamp;
                    console.log('üîê –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ SSH –∏–∑ –∫–µ—à–∞');
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ SSH:', error);
        }
    }
    
    saveToCache() {
        try {
            const data = {
                sshData: this.sshData,
                timestamp: Date.now()
            };
            localStorage.setItem(this.cacheKey, JSON.stringify(data));
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ SSH:', error);
        }
    }
    
    async loadSSHData() {
        try {
            const response = await fetch('/api/ssh-connections');
            const data = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if (JSON.stringify(this.sshData) !== JSON.stringify(data)) {
                this.sshData = data;
                this.lastUpdate = Date.now();
                this.saveToCache();
                this.renderSSHConnections();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSH –¥–∞–Ω–Ω—ã—Ö:', error);
            this.renderError();
        }
    }
    
    renderSSHConnections() {
        const container = document.getElementById('ssh-connections');
        if (!this.sshData) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ SSH –¥–∞–Ω–Ω—ã—Ö...</div>';
            return;
        }
        
        let sshHtml = `
            <div class="ssh-sections">
                <div class="ssh-section local-ssh">
                    <h3>üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
                    ${this.renderSSHTable(this.sshData.local)}
                </div>
                <div class="ssh-section remote-servers">
                    <h3>üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤</h3>
                    ${this.renderServerStatus(this.sshData.servers)}
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        sshHtml += `
            <div class="widget-footer">
                <span class="last-update">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(this.lastUpdate).toLocaleTimeString()}</span>
            </div>
        `;
        
        container.innerHTML = sshHtml;
    }
    
    renderSSHTable(connections) {
        if (!connections || connections.length === 0) {
            return `<div class="empty-state">–ê–∫—Ç–∏–≤–Ω—ã–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
        }
        
        let tableHtml = `
            <div class="ssh-table">
                <div class="ssh-header">
                    <span class="ssh-col protocol">–ü—Ä–æ—Ç–æ–∫–æ–ª</span>
                    <span class="ssh-col local">–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å</span>
                    <span class="ssh-col remote">–£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</span>
                    <span class="ssh-col status">–°—Ç–∞—Ç—É—Å</span>
                </div>
        `;
        
        connections.forEach((connection, index) => {
            tableHtml += `
                <div class="ssh-row ${index % 2 === 0 ? 'even' : 'odd'}">
                    <span class="ssh-col protocol">${connection.protocol || 'TCP'}</span>
                    <span class="ssh-col local" title="${connection.local_address}">${this.truncateText(connection.local_address, 20)}</span>
                    <span class="ssh-col remote" title="${connection.remote_address}">${this.truncateText(connection.remote_address, 20)}</span>
                    <span class="ssh-col status ssh-listening">üü¢ –°–ª—É—à–∞–µ—Ç</span>
                </div>
            `;
        });
        
        tableHtml += '</div>';
        return tableHtml;
    }
    
    renderServerStatus(servers) {
        if (!servers || Object.keys(servers).length === 0) {
            return `<div class="empty-state">–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
        }
        
        let serversHtml = '<div class="servers-grid">';
        
        Object.entries(servers).forEach(([serverName, serverData]) => {
            const displayName = this.getServerDisplayName(serverName);
            const statusClass = this.getServerStatusClass(serverData.status);
            
            serversHtml += `
                <div class="server-card ${statusClass}">
                    <div class="server-header">
                        <span class="server-name">${displayName}</span>
                        <span class="server-status">${this.formatServerStatus(serverData.status)}</span>
                    </div>
                    <div class="server-details">
                        ${this.renderServerDetails(serverData)}
                    </div>
                </div>
            `;
        });
        
        serversHtml += '</div>';
        return serversHtml;
    }
    
    renderServerDetails(serverData) {
        if (serverData.status === 'offline') {
            return '<div class="error">‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>';
        }
        
        if (serverData.status === 'error') {
            return `<div class="error">‚ö†Ô∏è ${serverData.error || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}</div>`;
        }
        
        return `
            <div class="ping">üèì –ü–∏–Ω–≥: ${serverData.ping || 'N/A'} –º—Å</div>
            <div class="uptime">‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${serverData.uptime || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
            <div class="memory">üíæ –û–ó–£: ${serverData.memory || 'N/A'}%</div>
            <div class="disk">üíø –î–∏—Å–∫: ${serverData.disk || 'N/A'}%</div>
        `;
    }
    
    renderError() {
        const container = document.getElementById('ssh-connections');
        container.innerHTML = `
            <div class="error-message">
                <div class="error-icon">‚ùå</div>
                <span>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSH –¥–∞–Ω–Ω—ã—Ö</span>
                <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</small>
            </div>
        `;
    }
    
    getServerDisplayName(serverName) {
        const nameMap = {
            'got_is_tod': 'üöÄ Got Is Tod',
            'azure-aluminium': 'üíé Azure Aluminium'
        };
        return nameMap[serverName] || serverName;
    }
    
    getServerStatusClass(status) {
        switch(status) {
            case 'online': return 'server-online';
            case 'offline': return 'server-offline';
            case 'error': return 'server-error';
            default: return 'server-unknown';
        }
    }
    
    formatServerStatus(status) {
        const statusMap = {
            'online': 'üü¢ –û–Ω–ª–∞–π–Ω',
            'offline': 'üî¥ –û—Ñ–ª–∞–π–Ω',
            'error': '‚ö†Ô∏è –û—à–∏–±–∫–∞'
        };
        return statusMap[status] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    truncateText(text, maxLength) {
        if (!text || text.length <= maxLength) return text;
        return text.substring(0, maxLength - 3) + '...';
    }
    
    startAutoRefresh() {
        setInterval(() => {
            this.loadSSHData();
        }, 12000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥
    }
}

console.log('üîê SSH widget –∑–∞–≥—Ä—É–∂–µ–Ω'); 