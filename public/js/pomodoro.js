/**
 * üçÖ POMODORO TIMER MODULE
 * –ü–æ–º–æ–¥–æ—Ä–æ —Ç–∞–π–º–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π anime-lock
 */

class PomodoroTimer {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞
        this.settings = {
            workDuration: 25 * 60,      // 25 –º–∏–Ω—É—Ç
            shortBreak: 5 * 60,         // 5 –º–∏–Ω—É—Ç
            longBreak: 15 * 60,         // 15 –º–∏–Ω—É—Ç
            sessionsUntilLongBreak: 4   // –ü–æ—Å–ª–µ 4 —Å–µ—Å—Å–∏–π - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        this.state = {
            timeRemaining: this.settings.workDuration,
            isRunning: false,
            isPaused: false,
            currentSession: 1,
            totalSessions: 8,
            sessionType: 'work', // 'work', 'shortBreak', 'longBreak'
            intervalId: null
        };
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.elements = {
            display: document.getElementById('timer-display'),
            progressCircle: document.getElementById('progress-circle'),
            startBtn: document.getElementById('start-btn'),
            pauseBtn: document.getElementById('pause-btn'),
            resetBtn: document.getElementById('reset-btn'),
            sessionCount: document.getElementById('session-count'),
            sessionType: document.getElementById('session-type'),
            widget: document.getElementById('pomodoro-section')
        };
        
        // –ó–≤—É–∫–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã)
        this.sounds = {
            tick: null,
            break: null,
            complete: null
        };
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.updateDisplay();
        this.updateSessionInfo();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.loadState();
    }
    
    bindEvents() {
        this.elements.startBtn.addEventListener('click', () => this.start());
        this.elements.pauseBtn.addEventListener('click', () => this.pause());
        this.elements.resetBtn.addEventListener('click', () => this.reset());
        
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            if (e.target.tagName !== 'INPUT') {
                switch(e.key) {
                    case ' ':
                        e.preventDefault();
                        this.state.isRunning ? this.pause() : this.start();
                        break;
                    case 'r':
                        this.reset();
                        break;
                    case 'Escape':
                        this.pause();
                        break;
                }
            }
        });
    }
    
    start() {
        if (!this.state.isRunning) {
            this.state.isRunning = true;
            this.state.isPaused = false;
            
            this.elements.startBtn.textContent = '–†–∞–±–æ—Ç–∞–µ—Ç...';
            this.elements.startBtn.disabled = true;
            this.elements.pauseBtn.disabled = false;
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è anime-lock
            this.writeStatusToFile();
            
            this.state.intervalId = setInterval(() => {
                this.tick();
            }, 1000);
            
            this.animateTimer();
            this.updateTomatoState();
        }
    }
    
    pause() {
        if (this.state.isRunning) {
            this.state.isRunning = false;
            this.state.isPaused = true;
            
            clearInterval(this.state.intervalId);
            
            this.elements.startBtn.textContent = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
            this.elements.startBtn.disabled = false;
            this.elements.pauseBtn.disabled = true;
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
            this.clearStatusFile();
            this.updateTomatoState();
        }
    }
    
    reset() {
        this.state.isRunning = false;
        this.state.isPaused = false;
        
        clearInterval(this.state.intervalId);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
        switch(this.state.sessionType) {
            case 'work':
                this.state.timeRemaining = this.settings.workDuration;
                break;
            case 'shortBreak':
                this.state.timeRemaining = this.settings.shortBreak;
                break;
            case 'longBreak':
                this.state.timeRemaining = this.settings.longBreak;
                break;
        }
        
        this.elements.startBtn.textContent = '–°—Ç–∞—Ä—Ç';
        this.elements.startBtn.disabled = false;
        this.elements.pauseBtn.disabled = true;
        
        this.updateDisplay();
        this.clearStatusFile();
        this.updateTomatoState();
    }
    
    tick() {
        this.state.timeRemaining--;
        
        if (this.state.timeRemaining <= 0) {
            this.completeSession();
        } else {
            this.updateDisplay();
            this.updateTomatoState(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–º–∏–¥–æ—Ä–∫–∏
            this.writeStatusToFile();
        }
    }
    
    completeSession() {
        this.state.isRunning = false;
        clearInterval(this.state.intervalId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.elements.widget.classList.add('completed');
        setTimeout(() => {
            this.elements.widget.classList.remove('completed');
        }, 600);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏
        if (this.state.sessionType === 'work') {
            // –ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã - –ø–µ—Ä–µ—Ä—ã–≤
            if (this.state.currentSession % this.settings.sessionsUntilLongBreak === 0) {
                this.startBreak('longBreak');
            } else {
                this.startBreak('shortBreak');
            }
            this.state.currentSession++;
        } else {
            // –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ - —Ä–∞–±–æ—Ç–∞
            this.startWork();
        }
        
        this.updateSessionInfo();
        this.saveState();
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.playCompletionSound();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification();
    }
    
    startWork() {
        this.state.sessionType = 'work';
        this.state.timeRemaining = this.settings.workDuration;
        this.updateDisplay();
        this.updateSessionInfo();
        this.updateTomatoState();
        
        this.elements.startBtn.textContent = '–°—Ç–∞—Ä—Ç';
        this.elements.startBtn.disabled = false;
        this.elements.pauseBtn.disabled = true;
    }
    
    startBreak(breakType) {
        this.state.sessionType = breakType;
        
        if (breakType === 'longBreak') {
            this.state.timeRemaining = this.settings.longBreak;
        } else {
            this.state.timeRemaining = this.settings.shortBreak;
        }
        
        this.updateDisplay();
        this.updateSessionInfo();
        this.updateTomatoState();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —ç–∫—Ä–∞–Ω–∞
        this.startScreenLock();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞
        setTimeout(() => {
            this.start();
        }, 1000);
    }
    
    async startScreenLock() {
        try {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–º–æ–¥–æ—Ä–æ –¥–ª—è anime-lock
            await this.writeStatusToFile();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º anime-lock-python –Ω–∞–ø—Ä—è–º—É—é
            const response = await fetch('/api/lock-screen', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sessionType: this.state.sessionType,
                    timeRemaining: this.state.timeRemaining,
                    lockCommand: '/home/cyberkitty/.local/bin/anime-lock-python'
                })
            });
            
            if (!response.ok) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å anime-lock —á–µ—Ä–µ–∑ API, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±');
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                this.lockScreenFallback();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
            this.lockScreenFallback();
        }
    }
    
    lockScreenFallback() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        this.showFullScreenBreakMessage();
    }
    
    showFullScreenBreakMessage() {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ
        const breakOverlay = document.createElement('div');
        breakOverlay.className = 'break-overlay';
        breakOverlay.innerHTML = `
            <div class="break-message">
                <h1>‚òï –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞!</h1>
                <div class="break-timer">${this.formatTime(this.state.timeRemaining)}</div>
                <p>–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –ø–æ—Ç—è–Ω–∏—Ç–µ—Å—å, –≤—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã</p>
                <button class="btn btn-accent" onclick="this.parentElement.parentElement.remove()">
                    –ü–æ–Ω—è—Ç–Ω–æ
                </button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è overlay
        const style = document.createElement('style');
        style.textContent = `
            .break-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(30, 30, 46, 0.95);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
                backdrop-filter: blur(10px);
            }
            .break-message {
                text-align: center;
                padding: 2rem;
                background: var(--cyberkitty-bg-light);
                border: 2px solid var(--cyberkitty-blue);
                border-radius: var(--border-radius-large);
                box-shadow: var(--shadow-large);
            }
            .break-message h1 {
                color: var(--cyberkitty-blue);
                font-size: 3rem;
                margin-bottom: 1rem;
            }
            .break-timer {
                font-size: 4rem;
                font-weight: 700;
                color: var(--cyberkitty-pink);
                margin: 1rem 0;
                text-shadow: 0 0 20px rgba(243, 139, 168, 0.5);
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(breakOverlay);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –≤ overlay
        const updateBreakTimer = () => {
            const timerElement = breakOverlay.querySelector('.break-timer');
            if (timerElement && this.state.isRunning) {
                timerElement.textContent = this.formatTime(this.state.timeRemaining);
            }
        };
        
        const breakInterval = setInterval(updateBreakTimer, 1000);
        
        // –£–±–∏—Ä–∞–µ–º overlay –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
        const checkBreakEnd = () => {
            if (this.state.sessionType === 'work' || this.state.timeRemaining <= 0) {
                clearInterval(breakInterval);
                if (document.body.contains(breakOverlay)) {
                    breakOverlay.remove();
                }
            } else {
                setTimeout(checkBreakEnd, 1000);
            }
        };
        
        setTimeout(checkBreakEnd, 1000);
    }
    
    async writeStatusToFile() {
        const status = `–û—Å—Ç–∞–ª–æ—Å—å: ${this.formatTime(this.state.timeRemaining)}`;
        
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ localStorage
            localStorage.setItem('pomodoro_status', status);
            
            // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
            await fetch('/api/pomodoro-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status })
            }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—É—Å:', error);
        }
    }
    
    clearStatusFile() {
        localStorage.removeItem('pomodoro_status');
        
        fetch('/api/pomodoro-status', {
            method: 'DELETE'
        }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    
    updateDisplay() {
        const timeText = this.formatTime(this.state.timeRemaining);
        this.elements.display.textContent = timeText;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        this.updateProgressBar();
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
        this.elements.display.className = 'timer-display';
        if (this.state.sessionType !== 'work') {
            this.elements.display.classList.add('break-mode');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
        if (this.state.timeRemaining <= 60 && this.state.isRunning) {
            this.elements.display.classList.add('pulse');
        } else {
            this.elements.display.classList.remove('pulse');
        }
    }
    
    updateProgressBar() {
        if (!this.elements.progressCircle) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
        let totalTime;
        switch(this.state.sessionType) {
            case 'work':
                totalTime = this.settings.workDuration;
                break;
            case 'shortBreak':
                totalTime = this.settings.shortBreak;
                break;
            case 'longBreak':
                totalTime = this.settings.longBreak;
                break;
            default:
                totalTime = this.settings.workDuration;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–æ—Ç 0 –¥–æ 1)
        const progress = (totalTime - this.state.timeRemaining) / totalTime;
        
        // –î–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏: 2 * œÄ * r = 2 * œÄ * 60 ‚âà 377
        const circumference = 377;
        const offset = circumference - (progress * circumference);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º stroke-dashoffset
        this.elements.progressCircle.style.strokeDashoffset = offset;
    }
    
    updateSessionInfo() {
        this.elements.sessionCount.textContent = `${this.state.currentSession}/${this.state.totalSessions}`;
        
        const typeNames = {
            'work': '–†–∞–±–æ—Ç–∞',
            'shortBreak': '–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤',
            'longBreak': '–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤'
        };
        
        this.elements.sessionType.textContent = typeNames[this.state.sessionType];
    }
    
    formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    
    animateTimer() {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        this.elements.display.classList.add('fade-in');
        setTimeout(() => {
            this.elements.display.classList.remove('fade-in');
        }, 300);
    }
    
    updateTomatoState() {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        this.elements.widget.classList.remove('working', 'break', 'paused', 'urgent', 'completed');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
        if (this.state.isPaused) {
            this.elements.widget.classList.add('paused');
        } else if (this.state.isRunning) {
            if (this.state.sessionType === 'work') {
                this.elements.widget.classList.add('working');
                
                // –î–æ–±–∞–≤–ª—è–µ–º "urgent" –µ—Å–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω—å—à–µ 2 –º–∏–Ω—É—Ç
                if (this.state.timeRemaining <= 120) {
                    this.elements.widget.classList.add('urgent');
                }
            } else {
                this.elements.widget.classList.add('break');
            }
        }
    }
    
    playCompletionSound() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
        try {
            const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+D1vnkpBSl+zO/ZizkHGGS57OafUR8MRJze8bllHggzj9n1s24iByF4xu/gkTgIG2W99N2QQg8PUa/i2bNqIgUrkMTz0XYiByJ4ye/didC...'); // –ó–∞–≥–ª—É—à–∫–∞
            audio.play().catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        } catch (error) {
            // –ï—Å–ª–∏ –∑–≤—É–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
    }
    
    showNotification() {
        if ('Notification' in window) {
            const typeNames = {
                'work': '—Ä–∞–±–æ—Ç—ã',
                'shortBreak': '–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞',
                'longBreak': '–¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞'
            };
            
            const message = this.state.sessionType === 'work' 
                ? 'üçÖ –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞!' 
                : 'üíº –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!';
            
            new Notification('Cyberkitty Pomodoro', {
                body: message,
                icon: 'üçÖ'
            });
        }
    }
    
    saveState() {
        localStorage.setItem('pomodoro_state', JSON.stringify(this.state));
    }
    
    loadState() {
        const saved = localStorage.getItem('pomodoro_state');
        if (saved) {
            try {
                const savedState = JSON.parse(saved);
                this.state = { ...this.state, ...savedState };
                this.state.isRunning = false; // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                this.state.intervalId = null;
                this.updateDisplay();
                this.updateSessionInfo();
            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', error);
            }
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
const breakModeStyle = document.createElement('style');
breakModeStyle.textContent = `
    .timer-display.break-mode {
        color: var(--cyberkitty-pink) !important;
        text-shadow: 0 0 20px rgba(243, 139, 168, 0.5) !important;
    }
`;
document.head.appendChild(breakModeStyle);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PomodoroTimer = PomodoroTimer; 