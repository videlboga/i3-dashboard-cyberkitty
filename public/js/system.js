/**
 * üñ•Ô∏è SYSTEM WIDGET
 * –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */

class SystemWidget {
    constructor() {
        this.systemDetails = null;
        this.temperatures = null;
        this.diskActivity = null;
        this.currentTab = 'overview';
        
        console.log('üñ•Ô∏è System widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    async init() {
        this.initializeTabs();
        await this.loadAllData();
        this.startAutoRefresh();
    }
    
    initializeTabs() {
        const tabButtons = document.querySelectorAll('#system-tabs .tab-btn');
        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });
    }
    
    switchTab(tabName) {
        if (this.currentTab === tabName) return;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('#system-tabs .tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`#system-tabs [data-tab="${tabName}"]`).classList.add('active');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('#system-content .tab-content').forEach(content => {
            content.classList.remove('active');
        });
        document.getElementById(`${tabName}-tab`).classList.add('active');
        
        this.currentTab = tabName;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        switch(tabName) {
            case 'overview':
                this.renderOverview();
                break;
            case 'memory':
                this.renderMemoryDetails();
                break;
            case 'temp':
                this.renderTemperatures();
                break;
            case 'disks':
                this.renderDiskActivity();
                break;
            case 'layout':
                this.initLayoutControls();
                break;
        }
    }
    
    async loadAllData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [detailsResponse, tempResponse, diskResponse] = await Promise.all([
                fetch('/api/system-details'),
                fetch('/api/temperatures'),
                fetch('/api/disk-activity')
            ]);
            
            this.systemDetails = await detailsResponse.json();
            this.temperatures = await tempResponse.json();
            this.diskActivity = await diskResponse.json();
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            this.renderCurrentTab();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    renderCurrentTab() {
        switch(this.currentTab) {
            case 'overview':
                this.renderOverview();
                break;
            case 'memory':
                this.renderMemoryDetails();
                break;
            case 'temp':
                this.renderTemperatures();
                break;
            case 'disks':
                this.renderDiskActivity();
                break;
        }
    }
    
    renderOverview() {
        const container = document.getElementById('system-overview');
        if (!this.systemDetails) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
            return;
        }
        
        const uptime = this.formatUptime(this.systemDetails.uptime);
        
        container.innerHTML = `
            <div class="overview-grid">
                <div class="overview-card">
                    <div class="card-icon">üß†</div>
                    <div class="card-info">
                        <div class="card-title">CPU</div>
                        <div class="card-value">${this.systemDetails.cpu_count} —è–¥–µ—Ä</div>
                        <div class="card-subtitle">${this.systemDetails.cpu_freq} MHz</div>
                    </div>
                </div>
                
                <div class="overview-card">
                    <div class="card-icon">üíæ</div>
                    <div class="card-info">
                        <div class="card-title">RAM</div>
                        <div class="card-value">${this.systemDetails.memory.total} GB</div>
                        <div class="card-subtitle">${this.systemDetails.memory.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</div>
                    </div>
                </div>
                
                <div class="overview-card">
                    <div class="card-icon">üîÑ</div>
                    <div class="card-info">
                        <div class="card-title">SWAP</div>
                        <div class="card-value">${this.systemDetails.swap.total} GB</div>
                        <div class="card-subtitle">${this.systemDetails.swap.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</div>
                    </div>
                </div>
                
                <div class="overview-card">
                    <div class="card-icon">‚è±Ô∏è</div>
                    <div class="card-info">
                        <div class="card-title">Uptime</div>
                        <div class="card-value">${uptime.days}–¥ ${uptime.hours}—á</div>
                        <div class="card-subtitle">${uptime.minutes}–º</div>
                    </div>
                </div>
            </div>
        `;
    }
    
    renderMemoryDetails() {
        const container = document.getElementById('memory-details');
        if (!this.systemDetails) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
            return;
        }
        
        const memory = this.systemDetails.memory;
        const swap = this.systemDetails.swap;
        
        container.innerHTML = `
            <div class="memory-section">
                <h3>üíæ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å</h3>
                <div class="memory-stats">
                    <div class="memory-bar">
                        <div class="memory-bar-fill" style="width: ${memory.percent}%"></div>
                        <div class="memory-bar-text">${memory.used} GB / ${memory.total} GB (${memory.percent}%)</div>
                    </div>
                    <div class="memory-details-grid">
                        <div class="memory-item">
                            <span class="memory-label">–î–æ—Å—Ç—É–ø–Ω–æ:</span>
                            <span class="memory-value">${memory.available} GB</span>
                        </div>
                        <div class="memory-item">
                            <span class="memory-label">–ö—ç—à:</span>
                            <span class="memory-value">${memory.cached} GB</span>
                        </div>
                        <div class="memory-item">
                            <span class="memory-label">–ë—É—Ñ–µ—Ä—ã:</span>
                            <span class="memory-value">${memory.buffers} GB</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="swap-section">
                <h3>üîÑ –§–∞–π–ª –ø–æ–¥–∫–∞—á–∫–∏</h3>
                <div class="swap-stats">
                    <div class="memory-bar">
                        <div class="memory-bar-fill swap" style="width: ${swap.percent}%"></div>
                        <div class="memory-bar-text">${swap.used} GB / ${swap.total} GB (${swap.percent}%)</div>
                    </div>
                </div>
            </div>
        `;
    }
    
    renderTemperatures() {
        const container = document.getElementById('temperature-sensors');
        if (!this.temperatures) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
            return;
        }
        
        let tempHtml = '<div class="temperature-grid">';
        
        for (const [sensor, data] of Object.entries(this.temperatures)) {
            const tempClass = this.getTempClass(data.current, data.high, data.critical);
            const tempIcon = this.getTempIcon(data.current, data.high, data.critical);
            
            tempHtml += `
                <div class="temp-card ${tempClass}">
                    <div class="temp-icon">${tempIcon}</div>
                    <div class="temp-info">
                        <div class="temp-sensor">${this.formatSensorName(sensor)}</div>
                        <div class="temp-value">${data.current}¬∞C</div>
                        <div class="temp-range">${data.high ? `Max: ${data.high}¬∞C` : ''}</div>
                    </div>
                </div>
            `;
        }
        
        tempHtml += '</div>';
        container.innerHTML = tempHtml;
    }
    
    renderDiskActivity() {
        const container = document.getElementById('disk-activity');
        if (!this.diskActivity) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
            return;
        }
        
        let diskHtml = '<div class="disk-sections">';
        
        // –†–∞–∑–¥–µ–ª—ã
        if (this.diskActivity.partitions && this.diskActivity.partitions.length > 0) {
            diskHtml += `
                <div class="partitions-section">
                    <h3>üíΩ –†–∞–∑–¥–µ–ª—ã –¥–∏—Å–∫–∞</h3>
                    <div class="partitions-grid">
            `;
            
            this.diskActivity.partitions.forEach(partition => {
                diskHtml += `
                    <div class="partition-card">
                        <div class="partition-header">
                            <span class="partition-device">${partition.device}</span>
                            <span class="partition-mount">${partition.mountpoint}</span>
                        </div>
                        <div class="partition-usage">
                            <div class="usage-bar">
                                <div class="usage-bar-fill" style="width: ${partition.percent}%"></div>
                            </div>
                            <div class="usage-text">
                                ${partition.used} GB / ${partition.total} GB (${partition.percent}%)
                            </div>
                        </div>
                        <div class="partition-info">
                            <span>–°–≤–æ–±–æ–¥–Ω–æ: ${partition.free} GB</span>
                            <span>FS: ${partition.fstype}</span>
                        </div>
                    </div>
                `;
            });
            
            diskHtml += '</div></div>';
        }
        
        // I/O —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if (this.diskActivity.io_stats && Object.keys(this.diskActivity.io_stats).length > 0) {
            diskHtml += `
                <div class="io-section">
                    <h3>üìä –î–∏—Å–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
                    <div class="io-grid">
            `;
            
            for (const [device, stats] of Object.entries(this.diskActivity.io_stats)) {
                diskHtml += `
                    <div class="io-card">
                        <div class="io-device">${device}</div>
                        <div class="io-stats">
                            <div class="io-stat">
                                <span class="io-label">–ß—Ç–µ–Ω–∏–µ:</span>
                                <span class="io-value">${this.formatBytes(stats.read_bytes)}</span>
                            </div>
                            <div class="io-stat">
                                <span class="io-label">–ó–∞–ø–∏—Å—å:</span>
                                <span class="io-value">${this.formatBytes(stats.write_bytes)}</span>
                            </div>
                            <div class="io-stat">
                                <span class="io-label">–û–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è:</span>
                                <span class="io-value">${stats.read_count.toLocaleString()}</span>
                            </div>
                            <div class="io-stat">
                                <span class="io-label">–û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏:</span>
                                <span class="io-value">${stats.write_count.toLocaleString()}</span>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            diskHtml += '</div></div>';
        }
        
        diskHtml += '</div>';
        container.innerHTML = diskHtml;
    }
    
    formatUptime(timestamp) {
        const now = Date.now() / 1000;
        const uptimeSeconds = now - timestamp;
        
        const days = Math.floor(uptimeSeconds / 86400);
        const hours = Math.floor((uptimeSeconds % 86400) / 3600);
        const minutes = Math.floor((uptimeSeconds % 3600) / 60);
        
        return { days, hours, minutes };
    }
    
    getTempClass(current, high, critical) {
        if (critical && current >= critical * 0.9) return 'temp-critical';
        if (high && current >= high * 0.8) return 'temp-warning';
        return 'temp-normal';
    }
    
    getTempIcon(current, high, critical) {
        if (critical && current >= critical * 0.9) return 'üî•';
        if (high && current >= high * 0.8) return 'üå°Ô∏è';
        return '‚ùÑÔ∏è';
    }
    
    formatSensorName(sensor) {
        return sensor
            .replace('_', ' ')
            .replace(/\b\w/g, l => l.toUpperCase())
            .replace('Cpu', 'CPU')
            .replace('Nvme', 'NVMe');
    }
    
    formatBytes(bytes) {
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        if (bytes === 0) return '0 B';
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }
    
    initLayoutControls() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–∫–µ—Ç–æ–º
        const enableDragBtn = document.getElementById('enable-drag-mode');
        const resetLayoutBtn = document.getElementById('reset-widget-layout');
        const saveLayoutBtn = document.getElementById('save-widget-layout');
        
        // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–∞
        const doInit = () => {
            console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ layout –≤ system.js');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ LayoutManager
            if (typeof window.layoutManager === 'undefined') {
                document.getElementById('layout-info').innerHTML = `
                    <p style="color: #ef4444;"><strong>‚ö†Ô∏è –û—à–∏–±–∫–∞:</strong></p>
                    <p>LayoutManager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                `;
                return;
            }

            this.setupLayoutButtons(enableDragBtn, resetLayoutBtn, saveLayoutBtn);
        };

        // –ï—Å–ª–∏ LayoutManager —É–∂–µ –≥–æ—Ç–æ–≤ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
        if (typeof window.layoutManager !== 'undefined') {
            doInit();
        } else {
            // –ò–Ω–∞—á–µ –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è LayoutManager
            console.log('üéØ LayoutManager –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥—ë–º...');
            const checkInterval = setInterval(() => {
                if (typeof window.layoutManager !== 'undefined') {
                    console.log('üéØ LayoutManager –≥–æ—Ç–æ–≤!');
                    clearInterval(checkInterval);
                    doInit();
                }
            }, 100);
            
            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            setTimeout(() => {
                clearInterval(checkInterval);
                if (typeof window.layoutManager === 'undefined') {
                    console.error('‚ùå LayoutManager –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥');
                }
            }, 5000);
        }
    }

    setupLayoutButtons(enableDragBtn, resetLayoutBtn, saveLayoutBtn) {
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        enableDragBtn.addEventListener('click', () => {
            console.log('üéØ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (system.js)');
            window.layoutManager.toggleDragMode();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            setTimeout(() => {
                if (window.layoutManager.isDragMode) {
                    this.updateLayoutStatus('–†–µ–∂–∏–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã!');
                } else {
                    this.updateLayoutStatus('–†–µ–∂–∏–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω');
                }
            }, 100);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –º–∞–∫–µ—Ç–∞
        resetLayoutBtn.addEventListener('click', () => {
            if (confirm('–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
                window.layoutManager.resetLayout();
                this.updateLayoutStatus('–ú–∞–∫–µ—Ç —Å–±—Ä–æ—à–µ–Ω –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞
        saveLayoutBtn.addEventListener('click', () => {
            window.layoutManager.saveLayout();
            this.updateLayoutStatus('–ú–∞–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        this.updateLayoutStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    }
    
    updateLayoutStatus(message) {
        const statusElement = document.querySelector('#layout-info p');
        if (statusElement) {
            statusElement.innerHTML = `<strong>–°—Ç–∞—Ç—É—Å:</strong> ${message}`;
        }
    }

    startAutoRefresh() {
        setInterval(() => {
            this.loadAllData();
        }, 10000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    }
}

console.log('üñ•Ô∏è System widget –∑–∞–≥—Ä—É–∂–µ–Ω'); 