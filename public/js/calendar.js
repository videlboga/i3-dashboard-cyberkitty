/**
 * üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤–∏–¥–∂–µ—Ç - CyberKitty Dashboard
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Calendar API (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 */
class CalendarWidget {
    constructor() {
        this.events = [];
        this.gapi = null;
        this.apiKey = null;
        this.clientId = null;
        this.accessToken = null;
        this.isSignedIn = false;
        this.isLoading = false;
        this.tokenClient = null;
        this.selectedDate = new Date(); // –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        this.currentMonth = new Date(); // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.viewMode = 'month'; // 'month' –∏–ª–∏ 'events'
        this.init();
    }

    async init() {
        try {
            console.log('üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤–∏–¥–∂–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.loadConfig();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
            this.renderOfflineMode();
        }
    }

    async loadConfig() {
        try {
            const response = await fetch('/calendar_config.json');
            const config = await response.json();
            this.apiKey = config.apiKey;
            this.clientId = config.clientId;
            
            console.log('üìÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            // –ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è Google API —Å–∫—Ä–∏–ø—Ç—ã
            this.waitForGoogleAPI();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.renderOfflineMode();
        }
    }

    waitForGoogleAPI() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100ms, –≥–æ—Ç–æ–≤—ã –ª–∏ Google API
        const checkAPI = () => {
            if (typeof gapi !== 'undefined' && typeof google !== 'undefined') {
                console.log('üìÖ Google API –≥–æ—Ç–æ–≤');
                this.loadGoogleAPI();
            } else {
                // –ñ–¥–µ–º –µ—â–µ 100ms
                setTimeout(checkAPI, 100);
            }
        };
        checkAPI();
    }

    async loadGoogleAPI() {
        try {
            console.log('üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google API');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GAPI
            await new Promise((resolve) => {
                gapi.load('client', resolve);
            });
            
            await gapi.client.init({
                apiKey: this.apiKey,
                discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest']
            });
            
            console.log('üìÖ Google Calendar API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Identity Services
            this.initializeGIS();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google API:', error);
            this.renderOfflineMode();
        }
    }

    waitForGoogleIdentity() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å google.accounts
        if (typeof google !== 'undefined' && google.accounts && google.accounts.oauth2) {
            this.initializeGIS();
        } else {
            // –ñ–¥–µ–º 100–º—Å –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
            setTimeout(() => this.waitForGoogleIdentity(), 100);
        }
    }

    initializeGIS() {
        try {
            this.tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: this.clientId,
                scope: 'https://www.googleapis.com/auth/calendar.readonly',
                callback: (response) => {
                    if (response.error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.error);
                        this.renderCalendar();
                        return;
                    }
                    
                    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                    this.accessToken = response.access_token;
                    this.isSignedIn = true;
                    this.loadEvents();
                }
            });
            
            console.log('üìÖ Google Identity Services –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.renderCalendar();
            this.startAutoRefresh();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GIS:', error);
            this.renderOfflineMode();
        }
    }

    async signIn() {
        if (!this.tokenClient) {
            this.showError('–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        try {
            this.isLoading = true;
            this.renderCalendar();
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
            this.tokenClient.requestAccessToken();
            
            console.log('üìÖ –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            this.isLoading = false;
            this.renderCalendar();
        }
    }

    async signOut() {
        if (this.accessToken) {
            // –û—Ç–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
            google.accounts.oauth2.revoke(this.accessToken, () => {
                console.log('üìÖ –¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω');
            });
        }
        
        this.accessToken = null;
        this.isSignedIn = false;
        this.events = [];
        this.renderCalendar();
        console.log('üìÖ –í—ã—Ö–æ–¥ –∏–∑ Google Calendar –≤—ã–ø–æ–ª–Ω–µ–Ω');
    }

    async loadEvents() {
        if (!this.isSignedIn || !this.accessToken) return;

        try {
            this.isLoading = true;
            this.renderCalendar();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            gapi.client.setToken({
                access_token: this.accessToken
            });

            const now = new Date();
            const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const endOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);

            const response = await gapi.client.calendar.events.list({
                calendarId: 'primary',
                timeMin: startOfDay.toISOString(),
                timeMax: endOfDay.toISOString(),
                singleEvents: true,
                orderBy: 'startTime',
                maxResults: 10
            });

            this.events = response.result.items || [];
            console.log(`üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${this.events.length}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
            if (error.status === 401) {
                // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                this.signOut();
                this.showError('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            } else {
                this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
            }
        } finally {
            this.isLoading = false;
            this.renderCalendar();
        }
    }

    renderCalendar() {
        const calendarContent = document.getElementById('calendar-content');
        if (!calendarContent) return;

        if (!this.apiKey || !this.clientId) {
            this.renderOfflineMode();
            return;
        }

        if (this.isLoading) {
            calendarContent.innerHTML = `
                <div class="calendar-loading">
                    <div class="loading-spinner">‚è≥</div>
                    <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å...</p>
                </div>
            `;
            return;
        }

        if (!this.isSignedIn) {
            calendarContent.innerHTML = `
                <div class="calendar-auth">
                    <div class="auth-icon">üìÖ</div>
                    <h3>Google Calendar</h3>
                    <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</p>
                    <button class="btn btn-primary" onclick="window.calendar.signIn()">
                        üîë –í–æ–π—Ç–∏ –≤ Google
                    </button>
                    <div class="auth-info">
                        <small>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</small>
                    </div>
                </div>
            `;
            return;
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (this.viewMode === 'month') {
            this.renderMonthView();
        } else {
            this.renderEventsView();
        }
    }

    renderMonthView() {
        const calendarContent = document.getElementById('calendar-content');
        const monthGrid = this.generateMonthGrid();
        
        calendarContent.innerHTML = `
            <div class="calendar-header">
                <div class="calendar-nav">
                    <button class="btn btn-small" onclick="window.calendar.previousMonth()" title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü">‚Äπ</button>
                    <h3 class="month-title">${this.getMonthName()}</h3>
                    <button class="btn btn-small" onclick="window.calendar.nextMonth()" title="–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü">‚Ä∫</button>
                </div>
                <div class="calendar-controls">
                    <button class="btn btn-small" onclick="window.calendar.toggleView()" title="–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π">üìã</button>
                    <button class="btn btn-small" onclick="window.calendar.refresh()" title="–û–±–Ω–æ–≤–∏—Ç—å">üîÑ</button>
                    <button class="btn btn-small" onclick="window.calendar.signOut()" title="–í—ã–π—Ç–∏">üö™</button>
                </div>
            </div>
            <div class="calendar-grid">
                ${monthGrid}
            </div>
            <div class="selected-date-events">
                <h4>üìÖ ${this.formatSelectedDate()}</h4>
                <div id="date-events"></div>
            </div>
        `;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        this.loadEventsForDate(this.selectedDate);
    }

    generateMonthGrid() {
        const year = this.currentMonth.getFullYear();
        const month = this.currentMonth.getMonth();
        
        // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        
        // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0)
        let startDay = firstDay.getDay();
        startDay = startDay === 0 ? 6 : startDay - 1; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
        
        let html = `
            <div class="calendar-weekdays">
                <div class="weekday">–ü–Ω</div>
                <div class="weekday">–í—Ç</div>
                <div class="weekday">–°—Ä</div>
                <div class="weekday">–ß—Ç</div>
                <div class="weekday">–ü—Ç</div>
                <div class="weekday">–°–±</div>
                <div class="weekday">–í—Å</div>
            </div>
            <div class="calendar-days">
        `;
        
        // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        for (let i = 0; i < startDay; i++) {
            html += '<div class="calendar-day empty"></div>';
        }
        
        // –î–Ω–∏ –º–µ—Å—è—Ü–∞
        const today = new Date();
        const selectedDay = this.selectedDate.getDate();
        const selectedMonth = this.selectedDate.getMonth();
        const selectedYear = this.selectedDate.getFullYear();
        
        for (let day = 1; day <= daysInMonth; day++) {
            const dayDate = new Date(year, month, day);
            const isToday = dayDate.toDateString() === today.toDateString();
            const isSelected = day === selectedDay && month === selectedMonth && year === selectedYear;
            
            let dayClass = 'calendar-day';
            if (isToday) dayClass += ' today';
            if (isSelected) dayClass += ' selected';
            
            html += `
                <div class="${dayClass}" onclick="window.calendar.selectDate(${year}, ${month}, ${day})">
                    <span class="day-number">${day}</span>
                </div>
            `;
        }
        
        html += '</div>';
        return html;
    }

    renderEvent(event) {
        const startTime = this.formatEventTime(event);
        const title = event.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const location = event.location ? `üìç ${event.location}` : '';
        const description = event.description ? event.description.substring(0, 100) + '...' : '';
        
        return `
            <div class="calendar-event">
                <div class="event-header">
                    <div class="event-time">${startTime}</div>
                    <div class="event-title">${title}</div>
                </div>
                ${location ? `<div class="event-location">${location}</div>` : ''}
                ${description ? `<div class="event-description">${description}</div>` : ''}
            </div>
        `;
    }

    renderOfflineMode() {
        const calendarContent = document.getElementById('calendar-content');
        calendarContent.innerHTML = `
            <div class="calendar-offline">
                <div class="offline-icon">üìÖ</div>
                <h3>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</h3>
                <p>–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Calendar API</p>
                <div class="auth-info">
                    <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª calendar_config.json</small>
                </div>
            </div>
        `;
    }

    showError(message) {
        const calendarContent = document.getElementById('calendar-content');
        if (!calendarContent) return;

        calendarContent.innerHTML = `
            <div class="calendar-error">
                <div class="error-icon">‚ùå</div>
                <h3>–û—à–∏–±–∫–∞</h3>
                <p>${message}</p>
                <button class="btn btn-primary" onclick="window.calendar.renderCalendar()">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }

    formatEventTime(event) {
        if (!event.start) return '';
        
        if (event.start.dateTime) {
            const start = new Date(event.start.dateTime);
            return start.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
        } else {
            return '–í–µ—Å—å –¥–µ–Ω—å';
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    getMonthName() {
        const monthNames = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        return `${monthNames[this.currentMonth.getMonth()]} ${this.currentMonth.getFullYear()}`;
    }

    formatSelectedDate() {
        const options = { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        };
        return this.selectedDate.toLocaleDateString('ru-RU', options);
    }

    selectDate(year, month, day) {
        this.selectedDate = new Date(year, month, day);
        this.renderCalendar();
    }

    previousMonth() {
        this.currentMonth.setMonth(this.currentMonth.getMonth() - 1);
        this.renderCalendar();
    }

    nextMonth() {
        this.currentMonth.setMonth(this.currentMonth.getMonth() + 1);
        this.renderCalendar();
    }

    toggleView() {
        this.viewMode = this.viewMode === 'month' ? 'events' : 'month';
        this.renderCalendar();
    }

    renderEventsView() {
        const calendarContent = document.getElementById('calendar-content');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        if (this.events.length === 0) {
            calendarContent.innerHTML = `
                <div class="calendar-header">
                    <h3>üìÖ –°–µ–≥–æ–¥–Ω—è</h3>
                    <div class="calendar-controls">
                        <button class="btn btn-small" onclick="window.calendar.toggleView()" title="–ö–∞–ª–µ–Ω–¥–∞—Ä—å">üóìÔ∏è</button>
                        <button class="btn btn-small" onclick="window.calendar.refresh()" title="–û–±–Ω–æ–≤–∏—Ç—å">üîÑ</button>
                        <button class="btn btn-small" onclick="window.calendar.signOut()" title="–í—ã–π—Ç–∏">üö™</button>
                    </div>
                </div>
                <div class="calendar-empty">
                    <div class="empty-icon">üéâ</div>
                    <p>–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç</p>
                    <small>–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞!</small>
                </div>
            `;
        } else {
            const eventsList = this.events.map(event => this.renderEvent(event)).join('');
            calendarContent.innerHTML = `
                <div class="calendar-header">
                    <h3>üìÖ –°–µ–≥–æ–¥–Ω—è (${this.events.length})</h3>
                    <div class="calendar-controls">
                        <button class="btn btn-small" onclick="window.calendar.toggleView()" title="–ö–∞–ª–µ–Ω–¥–∞—Ä—å">üóìÔ∏è</button>
                        <button class="btn btn-small" onclick="window.calendar.refresh()" title="–û–±–Ω–æ–≤–∏—Ç—å">üîÑ</button>
                        <button class="btn btn-small" onclick="window.calendar.signOut()" title="–í—ã–π—Ç–∏">üö™</button>
                    </div>
                </div>
                <div class="calendar-events">
                    ${eventsList}
                </div>
            `;
        }
    }

    loadEventsForDate(date) {
        if (!this.isSignedIn) return;
        
        const container = document.getElementById('date-events');
        if (!container) return;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        const dateStr = date.toISOString().split('T')[0];
        const dayEvents = this.events.filter(event => {
            if (event.start && event.start.date) {
                return event.start.date === dateStr;
            }
            if (event.start && event.start.dateTime) {
                const eventDate = new Date(event.start.dateTime).toISOString().split('T')[0];
                return eventDate === dateStr;
            }
            return false;
        });
        
        if (dayEvents.length === 0) {
            container.innerHTML = `
                <div class="no-events">
                    <p>üìã –°–æ–±—ã—Ç–∏–π –Ω–µ—Ç</p>
                </div>
            `;
        } else {
            const eventsList = dayEvents.map(event => this.renderCompactEvent(event)).join('');
            container.innerHTML = `
                <div class="day-events-list">
                    ${eventsList}
                </div>
            `;
        }
    }

    renderCompactEvent(event) {
        const time = this.formatEventTime(event);
        const title = event.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        
        return `
            <div class="compact-event">
                <div class="event-time">${time}</div>
                <div class="event-title">${title}</div>
            </div>
        `;
    }

    startAutoRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            if (this.isSignedIn && !this.isLoading) {
                console.log('üìÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
                this.loadEvents();
            }
        }, 5 * 60 * 1000);
    }

    async refresh() {
        if (this.isSignedIn) {
            console.log('üìÖ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
            await this.loadEvents();
        }
    }

    destroy() {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if (this.accessToken) {
            this.signOut();
        }
        
        // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if (window.calendar === this) {
            delete window.calendar;
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    if (typeof window !== 'undefined' && !window.calendar) {
        window.calendar = new CalendarWidget();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CalendarWidget;
}