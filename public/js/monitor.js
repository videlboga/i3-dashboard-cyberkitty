/**
 * ‚öôÔ∏è MONITOR WIDGET
 * –í–∏–¥–∂–µ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */

class MonitorWidget {
    constructor() {
        this.processes = null;
        this.dockerContainers = null;
        this.sshConnections = null;
        this.currentTab = 'processes';
        
        console.log('‚öôÔ∏è Monitor widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    async init() {
        this.initializeTabs();
        await this.loadProcesses();
        this.startAutoRefresh();
    }
    
    initializeTabs() {
        const tabButtons = document.querySelectorAll('#monitor-tabs .tab-btn');
        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });
    }
    
    switchTab(tabName) {
        if (this.currentTab === tabName) return;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('#monitor-tabs .tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`#monitor-tabs [data-tab="${tabName}"]`).classList.add('active');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('#monitor-content .tab-content').forEach(content => {
            content.classList.remove('active');
        });
        document.getElementById(`${tabName}-tab`).classList.add('active');
        
        this.currentTab = tabName;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        switch(tabName) {
            case 'processes':
                this.renderProcesses();
                break;
            case 'docker':
                this.renderDockerContainers();
                break;
            case 'ssh':
                this.renderSSHConnections();
                break;
        }
    }
    
    async loadProcesses() {
        try {
            const response = await fetch('/api/processes');
            this.processes = await response.json();
            
            if (this.currentTab === 'processes') {
                this.renderProcesses();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error);
        }
    }
    
    renderProcesses() {
        const container = document.getElementById('process-list');
        if (!this.processes) {
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...</div>';
            return;
        }
        
        let processHtml = `
            <div class="process-header">
                <div class="process-table-header">
                    <span class="process-col pid">PID</span>
                    <span class="process-col name">–ü—Ä–æ—Ü–µ—Å—Å</span>
                    <span class="process-col cpu">CPU %</span>
                    <span class="process-col memory">RAM %</span>
                    <span class="process-col status">–°—Ç–∞—Ç—É—Å</span>
                </div>
            </div>
            <div class="process-table">
        `;
        
        this.processes.forEach((process, index) => {
            const cpuClass = this.getCpuClass(process.cpu);
            const memoryClass = this.getMemoryClass(process.memory);
            const statusClass = this.getStatusClass(process.status);
            
            processHtml += `
                <div class="process-row ${index % 2 === 0 ? 'even' : 'odd'}">
                    <span class="process-col pid">${process.pid}</span>
                    <span class="process-col name" title="${process.name}">${this.truncateText(process.name, 15)}</span>
                    <span class="process-col cpu ${cpuClass}">${process.cpu}%</span>
                    <span class="process-col memory ${memoryClass}">${process.memory}%</span>
                    <span class="process-col status ${statusClass}">${this.formatStatus(process.status)}</span>
                </div>
            `;
        });
        
        processHtml += '</div>';
        container.innerHTML = processHtml;
    }
    
    async renderDockerContainers() {
        const container = document.getElementById('docker-containers');
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...</div>';
        
        try {
            const response = await fetch('/api/docker-containers');
            this.dockerContainers = await response.json();
            
            let dockerHtml = `
                <div class="docker-sections">
                    <div class="docker-section local-docker">
                        <h3>üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã</h3>
                        ${this.renderDockerTable(this.dockerContainers.local, 'local')}
                    </div>
                    <div class="docker-section remote-docker">
                        <h3>üåê –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã</h3>
                        ${this.renderRemoteDockerServers(this.dockerContainers.servers)}
                    </div>
                </div>
            `;
            
            container.innerHTML = dockerHtml;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', error);
            container.innerHTML = `
                <div class="error-message">
                    <div class="error-icon">‚ùå</div>
                    <span>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Docker –¥–∞–Ω–Ω—ã—Ö</span>
                    <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º</small>
                </div>
            `;
        }
    }
    
    async renderSSHConnections() {
        const container = document.getElementById('ssh-connections');
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...</div>';
        
        try {
            const response = await fetch('/api/ssh-connections');
            this.sshConnections = await response.json();
            
            let sshHtml = `
                <div class="ssh-sections">
                    <div class="ssh-section servers-status">
                        <h3>üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤</h3>
                        ${this.renderServersStatus(this.sshConnections.servers_status)}
                    </div>
                    <div class="ssh-section local-connections">
                        <h3>üîê –õ–æ–∫–∞–ª—å–Ω—ã–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
                        ${this.renderSSHTable(this.sshConnections.local_connections)}
                    </div>
                </div>
            `;
            
            container.innerHTML = sshHtml;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSH –¥–∞–Ω–Ω—ã—Ö:', error);
            container.innerHTML = `
                <div class="error-message">
                    <div class="error-icon">‚ùå</div>
                    <span>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSH –¥–∞–Ω–Ω—ã—Ö</span>
                    <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSH –∫–ª—é—á–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤</small>
                </div>
            `;
        }
    }
    
    getCpuClass(cpu) {
        if (cpu >= 50) return 'high-usage';
        if (cpu >= 20) return 'medium-usage';
        return 'low-usage';
    }
    
    getMemoryClass(memory) {
        if (memory >= 30) return 'high-usage';
        if (memory >= 10) return 'medium-usage';
        return 'low-usage';
    }
    
    getStatusClass(status) {
        switch(status) {
            case 'running': return 'status-running';
            case 'sleeping': return 'status-sleeping';
            case 'idle': return 'status-idle';
            case 'zombie': return 'status-zombie';
            default: return 'status-unknown';
        }
    }
    
    formatStatus(status) {
        const statusMap = {
            'running': 'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç',
            'sleeping': 'üò¥ –°–ø–∏—Ç',
            'idle': '‚è∏Ô∏è –ü—Ä–æ—Å—Ç–æ–π',
            'zombie': 'üßü –ó–æ–º–±–∏',
            'stopped': '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        };
        return statusMap[status] || '‚ùì ' + status;
    }
    
    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength - 3) + '...';
    }
    
    renderDockerTable(containers, location) {
        if (!containers || containers.length === 0) {
            return `<div class="empty-state">–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
        }
        
        let tableHtml = `
            <div class="docker-table">
                <div class="docker-header">
                    <span class="docker-col name">–ò–º—è</span>
                    <span class="docker-col image">–û–±—Ä–∞–∑</span>
                    <span class="docker-col status">–°—Ç–∞—Ç—É—Å</span>
                    <span class="docker-col ports">–ü–æ—Ä—Ç—ã</span>
                </div>
        `;
        
        containers.forEach((container, index) => {
            const statusClass = this.getDockerStatusClass(container.state);
            
            tableHtml += `
                <div class="docker-row ${index % 2 === 0 ? 'even' : 'odd'}">
                    <span class="docker-col name" title="${container.name}">${this.truncateText(container.name, 20)}</span>
                    <span class="docker-col image" title="${container.image}">${this.truncateText(container.image, 25)}</span>
                    <span class="docker-col status ${statusClass}">${this.formatDockerStatus(container.state)}</span>
                    <span class="docker-col ports" title="${container.ports}">${this.truncateText(container.ports || '–ù–µ—Ç', 15)}</span>
                </div>
            `;
        });
        
        tableHtml += '</div>';
        return tableHtml;
    }
    
    renderRemoteDockerServers(servers) {
        let serversHtml = '';
        
        Object.entries(servers).forEach(([serverName, containers]) => {
            const displayName = serverName === 'got_is_tod' ? 'üöÄ Got Is Tod' : 'üíé Azure Aluminium';
            
            serversHtml += `
                <div class="server-section">
                    <h4>${displayName}</h4>
                    ${this.renderDockerTable(containers, serverName)}
                </div>
            `;
        });
        
        return serversHtml;
    }
    
    renderServersStatus(serversStatus) {
        let statusHtml = '<div class="servers-grid">';
        
        Object.entries(serversStatus).forEach(([serverName, status]) => {
            const displayName = serverName === 'got_is_tod' ? 'üöÄ Got Is Tod' : 'üíé Azure Aluminium';
            const statusClass = this.getServerStatusClass(status.status);
            
            statusHtml += `
                <div class="server-card ${statusClass}">
                    <div class="server-header">
                        <span class="server-name">${displayName}</span>
                        <span class="server-status">${this.formatServerStatus(status.status)}</span>
                    </div>
                    <div class="server-details">
                        ${status.ping ? `<div class="ping">üèì –ü–∏–Ω–≥: ${status.ping}ms</div>` : ''}
                        ${status.info ? this.renderServerInfo(status.info) : ''}
                        ${status.error ? `<div class="error">‚ùå ${status.error}</div>` : ''}
                    </div>
                </div>
            `;
        });
        
        statusHtml += '</div>';
        return statusHtml;
    }
    
    renderServerInfo(info) {
        if (!info) return '';
        
        let infoHtml = '';
        if (info.uptime) infoHtml += `<div class="uptime">‚è±Ô∏è ${info.uptime}</div>`;
        if (info.disk) infoHtml += `<div class="disk">üíæ ${info.disk}</div>`;
        if (info.memory) infoHtml += `<div class="memory">üß† ${info.memory}</div>`;
        
        return infoHtml;
    }
    
    renderSSHTable(connections) {
        if (!connections || connections.length === 0) {
            return `<div class="empty-state">–ê–∫—Ç–∏–≤–Ω—ã–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;
        }
        
        let tableHtml = `
            <div class="ssh-table">
                <div class="ssh-header">
                    <span class="ssh-col type">–¢–∏–ø</span>
                    <span class="ssh-col local">–õ–æ–∫–∞–ª—å–Ω—ã–π</span>
                    <span class="ssh-col remote">–£–¥–∞–ª–µ–Ω–Ω—ã–π</span>
                    <span class="ssh-col status">–°—Ç–∞—Ç—É—Å</span>
                </div>
        `;
        
        connections.forEach((conn, index) => {
            tableHtml += `
                <div class="ssh-row ${index % 2 === 0 ? 'even' : 'odd'}">
                    <span class="ssh-col type">${conn.type}</span>
                    <span class="ssh-col local">${conn.local}</span>
                    <span class="ssh-col remote">${conn.remote}</span>
                    <span class="ssh-col status">${this.formatSSHStatus(conn.status)}</span>
                </div>
            `;
        });
        
        tableHtml += '</div>';
        return tableHtml;
    }
    
    getDockerStatusClass(state) {
        switch(state) {
            case 'running': return 'docker-running';
            case 'exited': return 'docker-exited';
            case 'paused': return 'docker-paused';
            case 'created': return 'docker-created';
            default: return 'docker-unknown';
        }
    }
    
    formatDockerStatus(state) {
        const statusMap = {
            'running': 'üü¢ –ó–∞–ø—É—â–µ–Ω',
            'exited': 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'paused': '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'created': 'üÜï –°–æ–∑–¥–∞–Ω',
            'restarting': 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫'
        };
        return statusMap[state] || '‚ùì ' + state;
    }
    
    getServerStatusClass(status) {
        switch(status) {
            case 'online': return 'server-online';
            case 'offline': return 'server-offline';
            case 'error': return 'server-error';
            default: return 'server-unknown';
        }
    }
    
    formatServerStatus(status) {
        const statusMap = {
            'online': 'üü¢ –û–Ω–ª–∞–π–Ω',
            'offline': 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω',
            'error': '‚ùå –û—à–∏–±–∫–∞'
        };
        return statusMap[status] || '‚ùì ' + status;
    }
    
    formatSSHStatus(status) {
        const statusMap = {
            'LISTEN': 'üëÇ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ',
            'ESTABLISHED': 'üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        };
        return statusMap[status] || status;
    }

    startAutoRefresh() {
        setInterval(() => {
            switch(this.currentTab) {
                case 'processes':
                    this.loadProcesses();
                    break;
                case 'docker':
                    this.renderDockerContainers();
                    break;
                case 'ssh':
                    this.renderSSHConnections();
                    break;
            }
        }, 10000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    }
}

console.log('‚öôÔ∏è Monitor widget –∑–∞–≥—Ä—É–∂–µ–Ω'); 