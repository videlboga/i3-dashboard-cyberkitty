#!/usr/bin/env python3
"""
üöÄ Cyberkitty Dashboard Development Server
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
"""

import http.server
import socketserver
# import webbrowser  # –£–±—Ä–∞–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
import os
import sys
import json
import subprocess
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT = 8082
HOST = "localhost"
PUBLIC_DIR = "public"

class CyberkittyHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å CORS –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=PUBLIC_DIR, **kwargs)
    
    def do_GET(self):
        print(f"üîç GET –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ –ü–ï–†–ï–î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if self.path == '/api/wallpaper':
            self.serve_wallpaper()
            return
        elif self.path == '/api/system-info':
            self.serve_system_info()
            return
        elif self.path == '/api/system-details':
            self.serve_system_details()
            return
        elif self.path == '/api/processes':
            self.serve_processes()
            return
        elif self.path == '/api/temperatures':
            self.serve_temperatures()
            return
        elif self.path == '/api/disk-activity':
            self.serve_disk_activity()
            return
        elif self.path == '/api/calendar-config':
            self.serve_calendar_config()
            return
        elif self.path == '/api/docker-containers':
            self.serve_docker_containers()
            return
        elif self.path == '/api/ssh-connections':
            self.serve_ssh_connections()
            return
        
        # –û–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        super().do_GET()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è API"""
        print(f"üìù POST –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        if self.path == '/api/lock-screen':
            self.handle_lock_screen()
        elif self.path == '/api/pomodoro-status':
            self.handle_pomodoro_status()
        else:
            self.send_response(404)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
    
    def handle_lock_screen(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–µ –ª–æ–∫–µ—Ä–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode())
            
            print(f"üîí –ó–∞–ø—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {data}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
            if data.get('sessionType') in ['shortBreak', 'longBreak']:
                break_end_time = int(time.time()) + data.get('timeRemaining', 300)
                with open('/tmp/pomodoro_break_end.txt', 'w') as f:
                    f.write(str(break_end_time))
                print(f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –∑–∞–ø–∏—Å–∞–Ω–æ: {break_end_time}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–µ –ª–æ–∫–µ—Ä
            lock_command = data.get('lockCommand', '/home/cyberkitty/.local/bin/anime-lock-python')
            
            if os.path.exists(lock_command):
                print(f"üéå –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∏–º–µ –ª–æ–∫–µ—Ä: {lock_command}")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
                subprocess.Popen([lock_command], 
                               stdout=subprocess.DEVNULL, 
                               stderr=subprocess.DEVNULL)
                
                response = {'status': 'success', 'message': '–ê–Ω–∏–º–µ –ª–æ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω'}
                self.send_response(200)
            else:
                print(f"‚ùå –ê–Ω–∏–º–µ –ª–æ–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {lock_command}")
                response = {'status': 'error', 'message': '–ê–Ω–∏–º–µ –ª–æ–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                self.send_response(404)
            
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(response).encode())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–µ—Ä–∞: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
    
    def handle_pomodoro_status(self):
        """–ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–º–æ–¥–æ—Ä–æ"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode())
            
            status = data.get('status', '')
            print(f"üìù –ó–∞–ø–∏—Å—ã–≤–∞—é —Å—Ç–∞—Ç—É—Å –ø–æ–º–æ–¥–æ—Ä–æ: {status}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∏–º–µ –ª–æ–∫–µ—Ä–∞
            with open('/tmp/pomodoro_status.txt', 'w') as f:
                f.write(status)
            
            response = {'status': 'success'}
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(response).encode())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
    
    def do_DELETE(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/api/pomodoro-status':
            try:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞
                import pathlib
                pathlib.Path('/tmp/pomodoro_status.txt').unlink(missing_ok=True)
                pathlib.Path('/tmp/pomodoro_break_end.txt').unlink(missing_ok=True)
                
                response = {'status': 'success'}
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode())
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
                self.send_response(500)
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
        else:
            self.send_response(404)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
    
    def serve_wallpaper(self):
        """–û—Ç–¥–∞—ë–º —Ç–µ–∫—É—â–∏–µ –æ–±–æ–∏ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"""
        print("üñºÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –æ–±–æ–µ–≤...")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –æ–±–æ—è–º –∏–∑ nitrogen
            result = subprocess.run(['cat', os.path.expanduser('~/.config/nitrogen/bg-saved.cfg')], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"üìÑ –ö–æ–Ω—Ñ–∏–≥ nitrogen: {result.stdout}")
                # –ò—â–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∫–æ–Ω—Ñ–∏–≥–µ nitrogen
                for line in result.stdout.split('\n'):
                    if line.startswith('file='):
                        wallpaper_path = line.split('=', 1)[1]
                        print(f"üîç –ù–∞–π–¥–µ–Ω –ø—É—Ç—å: {wallpaper_path}")
                        if os.path.exists(wallpaper_path):
                            print(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–¥–∞—é: {wallpaper_path}")
                            # –û—Ç–¥–∞—ë–º —Ñ–∞–π–ª –æ–±–æ–µ–≤
                            with open(wallpaper_path, 'rb') as f:
                                self.send_response(200)
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                                if wallpaper_path.lower().endswith('.jpg') or wallpaper_path.lower().endswith('.jpeg'):
                                    self.send_header('Content-Type', 'image/jpeg')
                                elif wallpaper_path.lower().endswith('.png'):
                                    self.send_header('Content-Type', 'image/png')
                                else:
                                    self.send_header('Content-Type', 'image/jpeg')
                                
                                self.send_header('Access-Control-Allow-Origin', '*')
                                self.end_headers()
                                self.wfile.write(f.read())
                                return
                        else:
                            print(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {wallpaper_path}")
            
            print("‚ùå –û–±–æ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–¥–∞—é 404")
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–¥–∞—ë–º 404
            self.send_response(404)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–æ–µ–≤: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
    
    def serve_system_info(self):
        """API –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        print("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        try:
            try:
                import psutil
                system_info = {
                    'cpu': round(psutil.cpu_percent(interval=1), 1),
                    'memory': round(psutil.virtual_memory().percent, 1),
                    'disk': round(psutil.disk_usage('/').percent, 1)
                }
                print(f"üìà –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {system_info}")
            except ImportError:
                # Fallback –µ—Å–ª–∏ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                print("‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                system_info = {
                    'cpu': 25.5,
                    'memory': 45.2,
                    'disk': 67.8
                }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(system_info).encode())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

    def serve_system_details(self):
        """API –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        print("üî¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        try:
            try:
                import psutil
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
                memory = psutil.virtual_memory()
                swap = psutil.swap_memory()
                
                system_details = {
                    'memory': {
                        'total': round(memory.total / (1024**3), 2),  # GB
                        'available': round(memory.available / (1024**3), 2),  # GB
                        'used': round((memory.total - memory.available) / (1024**3), 2),  # GB
                        'percent': round(memory.percent, 1),
                        'cached': round(getattr(memory, 'cached', 0) / (1024**3), 2),  # GB
                        'buffers': round(getattr(memory, 'buffers', 0) / (1024**3), 2)  # GB
                    },
                    'swap': {
                        'total': round(swap.total / (1024**3), 2),  # GB
                        'used': round(swap.used / (1024**3), 2),  # GB
                        'percent': round(swap.percent, 1)
                    },
                    'uptime': round(psutil.boot_time()),
                    'cpu_count': psutil.cpu_count(),
                    'cpu_freq': round(psutil.cpu_freq().current) if psutil.cpu_freq() else 0
                }
                
                print(f"üî¨ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {system_details}")
                
            except ImportError:
                print("‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                system_details = {
                    'memory': {
                        'total': 16.0,
                        'available': 8.5,
                        'used': 7.5,
                        'percent': 46.9,
                        'cached': 2.3,
                        'buffers': 0.8
                    },
                    'swap': {
                        'total': 8.0,
                        'used': 1.2,
                        'percent': 15.0
                    },
                    'uptime': 1640995200,
                    'cpu_count': 8,
                    'cpu_freq': 3400
                }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(system_details).encode())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

    def serve_processes(self):
        """API –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"""
        print("‚öôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö...")
        try:
            try:
                import psutil
                
                processes = []
                for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'status']):
                    try:
                        proc_info = proc.info
                        if proc_info['cpu_percent'] is None:
                            proc_info['cpu_percent'] = 0.0
                        if proc_info['memory_percent'] is None:
                            proc_info['memory_percent'] = 0.0
                            
                        processes.append({
                            'pid': proc_info['pid'],
                            'name': proc_info['name'],
                            'cpu': round(proc_info['cpu_percent'], 1),
                            'memory': round(proc_info['memory_percent'], 1),
                            'status': proc_info['status']
                        })
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU (—Ç–æ–ø 20)
                processes.sort(key=lambda x: x['cpu'], reverse=True)
                top_processes = processes[:20]
                
                print(f"‚öôÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ø {len(top_processes)}")
                
            except ImportError:
                print("‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                top_processes = [
                    {'pid': 1234, 'name': 'chrome', 'cpu': 15.4, 'memory': 8.2, 'status': 'running'},
                    {'pid': 5678, 'name': 'code', 'cpu': 12.1, 'memory': 6.7, 'status': 'running'},
                    {'pid': 9012, 'name': 'firefox', 'cpu': 8.9, 'memory': 12.3, 'status': 'running'},
                    {'pid': 3456, 'name': 'python3', 'cpu': 5.2, 'memory': 2.1, 'status': 'running'},
                    {'pid': 7890, 'name': 'kitty', 'cpu': 3.1, 'memory': 1.8, 'status': 'running'}
                ]
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(top_processes).encode())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

    def serve_temperatures(self):
        """API –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö"""
        print("üå°Ô∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä...")
        try:
            try:
                import psutil
                
                temperatures = {}
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                if hasattr(psutil, 'sensors_temperatures'):
                    temps = psutil.sensors_temperatures()
                    for name, entries in temps.items():
                        for entry in entries:
                            temp_name = f"{name}_{entry.label}" if entry.label else name
                            temperatures[temp_name] = {
                                'current': round(entry.current, 1),
                                'high': entry.high,
                                'critical': entry.critical
                            }
                
                print(f"üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {temperatures}")
                
            except ImportError:
                print("‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                temperatures = {
                    'cpu_package': {'current': 45.0, 'high': 80.0, 'critical': 90.0},
                    'cpu_core0': {'current': 42.0, 'high': 80.0, 'critical': 90.0},
                    'cpu_core1': {'current': 44.0, 'high': 80.0, 'critical': 90.0},
                    'nvme': {'current': 38.0, 'high': 70.0, 'critical': 80.0}
                }
            except:
                # Fallback –¥–ª—è —Å–∏—Å—Ç–µ–º –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                temperatures = {
                    'cpu': {'current': 45.0, 'high': 80.0, 'critical': 90.0}
                }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(temperatures).encode())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

    def serve_disk_activity(self):
        """API –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        print("üíæ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –¥–∏—Å–∫–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
        try:
            try:
                import psutil
                
                # –ü–æ–ª—É—á–∞–µ–º I/O —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏—Å–∫–æ–≤
                disk_io = psutil.disk_io_counters(perdisk=True)
                disk_usage = {}
                
                for device, io_stats in disk_io.items():
                    disk_usage[device] = {
                        'read_bytes': io_stats.read_bytes,
                        'write_bytes': io_stats.write_bytes,
                        'read_count': io_stats.read_count,
                        'write_count': io_stats.write_count,
                        'read_time': io_stats.read_time,
                        'write_time': io_stats.write_time
                    }
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
                partitions = []
                for partition in psutil.disk_partitions():
                    try:
                        usage = psutil.disk_usage(partition.mountpoint)
                        partitions.append({
                            'device': partition.device,
                            'mountpoint': partition.mountpoint,
                            'fstype': partition.fstype,
                            'total': round(usage.total / (1024**3), 2),  # GB
                            'used': round(usage.used / (1024**3), 2),   # GB
                            'free': round(usage.free / (1024**3), 2),   # GB
                            'percent': round((usage.used / usage.total) * 100, 1)
                        })
                    except PermissionError:
                        continue
                
                disk_data = {
                    'io_stats': disk_usage,
                    'partitions': partitions
                }
                
                print(f"üíæ –î–∏—Å–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –Ω–∞–π–¥–µ–Ω–æ {len(partitions)} —Ä–∞–∑–¥–µ–ª–æ–≤")
                
            except ImportError:
                print("‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                disk_data = {
                    'io_stats': {
                        'nvme0n1': {
                            'read_bytes': 12345678901,
                            'write_bytes': 9876543210,
                            'read_count': 123456,
                            'write_count': 98765,
                            'read_time': 45678,
                            'write_time': 32109
                        }
                    },
                    'partitions': [
                        {
                            'device': '/dev/nvme0n1p2',
                            'mountpoint': '/',
                            'fstype': 'ext4',
                            'total': 238.5,
                            'used': 78.9,
                            'free': 159.6,
                            'percent': 33.1
                        }
                    ]
                }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(disk_data).encode())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
    
    def serve_calendar_config(self):
        """API –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Calendar"""
        print("üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
            config_file = Path('calendar_config.json')
            
            if config_file.exists():
                with open(config_file, 'r') as f:
                    config = json.load(f)
                    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {config_file}")
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
                config = {
                    'apiKey': '',
                    'clientId': '',
                    'instructions': '–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –≤ Google Cloud Console'
                }
                
                with open(config_file, 'w') as f:
                    json.dump(config, f, indent=2)
                    
                print(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {config_file}")
                print("‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Calendar")
            
            # –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            response_config = config.copy()
            if response_config.get('apiKey'):
                response_config['apiKey'] = response_config['apiKey'][:10] + '...' if len(response_config['apiKey']) > 10 else 'set'
            if response_config.get('clientId'):
                response_config['clientId'] = response_config['clientId'][:20] + '...' if len(response_config['clientId']) > 20 else 'set'
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(response_config).encode())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –ø–µ—Ä–µ—à–µ–ª –≤ offline —Ä–µ–∂–∏–º
            self.send_response(404)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

    def serve_docker_containers(self):
        """API –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö (–ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö)"""
        print("üê≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        try:
            containers_data = {
                'local': self.get_local_docker_containers(),
                'servers': {
                    'got_is_tod': self.get_remote_docker_containers('got_is_tod'),
                    'azure-aluminium': self.get_remote_docker_containers('azure-aluminium')
                }
            }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(containers_data).encode())
            
            print(f"üê≥ Docker –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

    def serve_ssh_connections(self):
        """API –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –∏ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("üîê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        try:
            ssh_data = {
                'local': self.get_local_ssh_connections(),     # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç—É
                'servers': {                                   # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç—É
                    'got_is_tod': self.check_server_status('got_is_tod'),
                    'azure-aluminium': self.check_server_status('azure-aluminium')
                }
            }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(ssh_data).encode())
            
            print(f"üîê SSH –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
            self.send_response(500)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

    def get_local_docker_containers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        try:
            import subprocess
            result = subprocess.run(['docker', 'ps', '-a', '--format', 'json'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                containers = []
                for line in result.stdout.strip().split('\n'):
                    if line:
                        container = json.loads(line)
                        containers.append({
                            'id': container.get('ID', ''),
                            'name': container.get('Names', ''),
                            'image': container.get('Image', ''),
                            'status': container.get('Status', ''),
                            'state': container.get('State', ''),
                            'ports': container.get('Ports', ''),
                            'created': container.get('CreatedAt', '')
                        })
                return containers
            else:
                print("‚ö†Ô∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
                return []
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            return []

    def get_remote_docker_containers(self, server_alias):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import subprocess
            cmd = f'ssh {server_alias} "docker ps -a --format json" 2>/dev/null'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                containers = []
                for line in result.stdout.strip().split('\n'):
                    if line:
                        try:
                            container = json.loads(line)
                            containers.append({
                                'id': container.get('ID', ''),
                                'name': container.get('Names', ''),
                                'image': container.get('Image', ''),
                                'status': container.get('Status', ''),
                                'state': container.get('State', ''),
                                'ports': container.get('Ports', ''),
                                'created': container.get('CreatedAt', ''),
                                'server': server_alias
                            })
                        except json.JSONDecodeError:
                            continue
                return containers
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {server_alias} –∏–ª–∏ Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return []
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å {server_alias}: {e}")
            return []

    def get_remote_server_processes(self, server_alias):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import subprocess
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
            cmd = f'ssh -o ConnectTimeout=5 {server_alias} "ps aux --sort=-%cpu | head -10" 2>/dev/null'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                processes = []
                lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for i, line in enumerate(lines[:8]):  # –ë–µ—Ä–µ–º —Ç–æ–ø 8 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    if line.strip():
                        parts = line.split(None, 10)  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º 11 —á–∞—Å—Ç–µ–π
                        if len(parts) >= 11:
                            processes.append({
                                'protocol': f'{server_alias} Process',
                                'local_address': f"CPU: {parts[2]}%",
                                'remote_address': f"{parts[10][:50]}..." if len(parts[10]) > 50 else parts[10],
                                'status': f"MEM: {parts[3]}%"
                            })
                return processes
            else:
                return []
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å {server_alias}: {e}")
            return []

    def get_local_ssh_connections(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        ssh_connections = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            servers = ['got_is_tod', 'azure-aluminium']
            
            for server in servers:
                server_processes = self.get_remote_server_processes(server)
                ssh_connections.extend(server_processes)
            
            return ssh_connections
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return []

    def check_server_status(self, server_alias):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import subprocess
            import time
            
            start_time = time.time()
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            cmd = f'ssh -o ConnectTimeout=5 -o BatchMode=yes {server_alias} "echo connected" 2>/dev/null'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
            
            ping_time = round((time.time() - start_time) * 1000, 1)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            if result.returncode == 0 and 'connected' in result.stdout:
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
                uptime_cmd = f'ssh -o ConnectTimeout=3 {server_alias} "uptime; df -h / | tail -1; free -m | grep Mem" 2>/dev/null'
                uptime_result = subprocess.run(uptime_cmd, shell=True, capture_output=True, text=True, timeout=8)
                
                server_info = {'ping': ping_time}
                if uptime_result.returncode == 0:
                    lines = uptime_result.stdout.strip().split('\n')
                    if len(lines) >= 3:
                        server_info['uptime'] = lines[0].strip()
                        server_info['disk'] = lines[1].strip()
                        server_info['memory'] = lines[2].strip()
                
                return {
                    'status': 'online',
                    'ping': ping_time,
                    'info': server_info
                }
            else:
                return {
                    'status': 'offline',
                    'ping': None,
                    'error': 'Connection failed'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'ping': None,
                'error': str(e)
            }

    def log_message(self, format, *args):
        """–ö—Ä–∞—Å–∏–≤—ã–µ –ª–æ–≥–∏ –≤ —Å—Ç–∏–ª–µ Cyberkitty"""
        print(f"üöÄ [{self.log_date_time_string()}] {format % args}")

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path(PUBLIC_DIR).exists():
        print("‚ùå –ü–∞–ø–∫–∞ 'public' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        with socketserver.TCPServer((HOST, PORT), CyberkittyHTTPRequestHandler) as httpd:
            server_url = f"http://{HOST}:{PORT}"
            
            print("\n" + "="*50)
            print("üöÄ CYBERKITTY DASHBOARD SERVER")
            print("="*50)
            print(f"üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: {server_url}")
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.path.abspath(PUBLIC_DIR)}")
            print("üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
            print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print("="*50 + "\n")
            
            # –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ª–æ–Ω—á–µ—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É
            # try:
            #     webbrowser.open(server_url)
            # except Exception as e:
            #     print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
            #     print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: {server_url}")
            print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ –ª–æ–Ω—á–µ—Ä: ./launch-transparent.sh")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print("\n\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except OSError as e:
        if e.errno == 98:  # Address already in use
            print(f"‚ùå –ü–æ—Ä—Ç {PORT} —É–∂–µ –∑–∞–Ω—è—Ç!")
            print(f"   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 